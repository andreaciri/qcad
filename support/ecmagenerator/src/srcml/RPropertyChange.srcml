<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./core" filename="RPropertyChange.h"><comment type="block">/**
 * Copyright (c) 2011-2016 by Andrew Mustun. All rights reserved.
 * 
 * This file is part of the QCAD project.
 *
 * QCAD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QCAD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QCAD.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RPROPERTYCHANGE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RPROPERTYCHANGE_H</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"core_global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QVariant&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RObject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RPropertyTypeId.h"</cpp:file></cpp:include>

<class_decl>class <name>RStorage</name>;</class_decl>
<class_decl>class <name>RExporter</name>;</class_decl>

<comment type="block">/**
 * Stores the change that was made to a property of an object.
 *
 * \scriptable
 * \copyable
 */</comment>
<class>class <macro><name>QCADCORE_EXPORT</name></macro> <name>RPropertyChange</name> <block>{<private type="default">
</private><public>public:
    <constructor><name>RPropertyChange</name><parameter_list>()</parameter_list> <block>{}</block></constructor>
    <constructor_decl><name>RPropertyChange</name><parameter_list>(<param><decl><type><name>RPropertyTypeId</name></type> <name>propertyTypeId</name></decl></param>, <param><decl><type><name>QVariant</name></type> <name>oldValue</name></decl></param>, <param><decl><type><name>QVariant</name></type> <name>newValue</name></decl></param>)</parameter_list>;</constructor_decl>

    <function><type><name>void</name></type> <name>setOldValue</name><parameter_list>(<param><decl><type><name>const</name> <name>QVariant</name>&amp;</type> <name>v</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>oldValue</name> = <name>v</name></expr>;</expr_stmt>
    }</block></function>
    <function><type><name>QVariant</name></type> <name>getOldValue</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>oldValue</name></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setNewValue</name><parameter_list>(<param><decl><type><name>const</name> <name>QVariant</name>&amp;</type> <name>v</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>newValue</name> = <name>v</name></expr>;</expr_stmt>
    }</block></function>
    <function><type><name>QVariant</name></type> <name>getNewValue</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>newValue</name></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setPropertyTypeId</name><parameter_list>(<param><decl><type><name>const</name> <name>RPropertyTypeId</name>&amp;</type> <name>id</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>propertyTypeId</name> = <name>id</name></expr>;</expr_stmt>
    }</block></function>
    <function><type><name>RPropertyTypeId</name></type> <name>getPropertyTypeId</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>propertyTypeId</name></expr>;</return>
    }</block></function>

</public><public>public:
    <decl_stmt><decl><type><name>RPropertyTypeId</name></type> <name>propertyTypeId</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QVariant</name></type> <name>oldValue</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QVariant</name></type> <name>newValue</name></decl>;</decl_stmt>
</public>}</block>;</class>

<function_decl><type><name>QCADCORE_EXPORT</name> <name>QDebug</name></type> <name>operator&lt;&lt;</name><parameter_list>(<param><decl><type><name>QDebug</name></type> <name>dbg</name></decl></param>, <param><decl><type><name>const</name> <name>RPropertyChange</name>&amp;</type> <name>p</name></decl></param>)</parameter_list>;</function_decl>

<typedef>typedef <type><name>QMap<argument_list>&lt;<argument><name>int</name></argument>, <argument><name>QList<argument_list>&lt;<argument><name>RPropertyChange</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>_RMapIntPropertyChange</name>;</typedef>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>_RMapIntPropertyChange*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>_RMapIntPropertyChange</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RPropertyChange*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RPropertyChange</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
