<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./scripting/ecmaapi/adapters" filename="RImportListenerAdapter.h"><comment type="block">/**
 * Copyright (c) 2011-2016 by Andrew Mustun. All rights reserved.
 * 
 * This file is part of the QCAD project.
 *
 * QCAD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QCAD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QCAD.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RIMPORTLISTENERADAPTER_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RIMPORTLISTENERADAPTER_H_</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QObject&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RDocumentInterface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RImportListener.h"</cpp:file></cpp:include>

<comment type="block">/**
 * \scriptable
 * \ingroup ecma
 */</comment>
<class>class <name>RImportListenerAdapter</name><super>: <specifier>public</specifier> <name>QObject</name>, <specifier>public</specifier> <name>RImportListener</name></super> <block>{<private type="default">
<macro><name>Q_OBJECT</name></macro>

</private><public>public:
    <destructor><specifier>virtual</specifier> <name>~RImportListenerAdapter</name><parameter_list>()</parameter_list> <block>{ }</block></destructor>

    <function><type><name>virtual</name> <name>void</name></type> <name>preImportEvent</name><parameter_list>(<param><decl><type><name>RDocumentInterface</name>*</type> <name>documentInterface</name></decl></param>)</parameter_list> <block>{
        <function_decl><type><name>emit</name></type> <name>preImport</name><parameter_list>(<param><decl><type><name>documentInterface</name></type></decl></param>)</parameter_list>;</function_decl>
    }</block></function>

    <function><type><name>virtual</name> <name>void</name></type> <name>postImportEvent</name><parameter_list>(<param><decl><type><name>RDocumentInterface</name>*</type> <name>documentInterface</name></decl></param>)</parameter_list> <block>{
        <function_decl><type><name>emit</name></type> <name>postImport</name><parameter_list>(<param><decl><type><name>documentInterface</name></type></decl></param>)</parameter_list>;</function_decl>
    }</block></function>

<label><name>signals</name>:</label>
    <function_decl><type><name>void</name></type> <name>preImport</name><parameter_list>(<param><decl><type><name>RDocumentInterface</name>*</type> <name>documentInterface</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>postImport</name><parameter_list>(<param><decl><type><name>RDocumentInterface</name>*</type> <name>documentInterface</name></decl></param>)</parameter_list>;</function_decl>
</public>}</block>;</class>

<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RImportListenerAdapter*</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
