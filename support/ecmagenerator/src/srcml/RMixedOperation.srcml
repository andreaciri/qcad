<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./operations" filename="RMixedOperation.h"><comment type="block">/**
 * Copyright (c) 2011-2016 by Andrew Mustun. All rights reserved.
 * 
 * This file is part of the QCAD project.
 *
 * QCAD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QCAD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QCAD.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RMIXEDOPERATION_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RMIXEDOPERATION_H</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"operations_global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QList&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QSharedPointer&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QFlags&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RDocument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RExporter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ROperation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RTransaction.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RVector.h"</cpp:file></cpp:include>

<class_decl>class <name>RObject</name>;</class_decl>

<comment type="block">/**
 * Implementation of an operation that adds, modifies and deletes entities.
 *
 * \obsolete
 * \ingroup operations
 * \scriptable
 */</comment>
<class>class <macro><name>QCADOPERATIONS_EXPORT</name></macro> <name>RMixedOperation</name><super>: <specifier>public</specifier> <name>ROperation</name></super> <block>{<private type="default">
</private><public>public:
    <enum>enum <name>Mode</name> <block>{
        <expr><name>NoMode</name> = 0x0</expr>,
        <expr><name>UseCurrentAttributes</name> = 0x1</expr>,
        <expr><name>Delete</name> = 0x2</expr>,
        <expr><name>ForceNew</name> = 0x4</expr>,
        <expr><name>EndCycle</name> = 0x8</expr>
    }</block>;</enum>
    <macro><name>Q_DECLARE_FLAGS</name><argument_list>(<argument>Modes</argument>, <argument>Mode</argument>)</argument_list></macro>

</public><public>public:
    <constructor_decl><name>RMixedOperation</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>undoable</name> =<init> <expr><name>true</name></expr></init></decl></param>)</parameter_list>;</constructor_decl>
    <destructor><specifier>virtual</specifier> <name>~RMixedOperation</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>RDebug</name>::<name>decCounter</name></name><argument_list>(<argument><expr>"RMixedOperation"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></destructor>

    <function_decl><type><name>QSharedPointer<argument_list>&lt;<argument><name>RObject</name></argument>&gt;</argument_list></name></type> <name>addObject</name><parameter_list>(<param><decl><type><name>const</name> <name>QSharedPointer<argument_list>&lt;<argument><name>RObject</name></argument>&gt;</argument_list></name>&amp;</type> <name>obj</name></decl></param>,
        <param><decl><type><name>bool</name></type> <name>useCurrentAttributes</name> =<init> <expr><name>true</name></expr></init></decl></param>, <param><decl><type><name>bool</name></type> <name>forceNew</name>=<init><expr><name>false</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>deleteObject</name><parameter_list>(<param><decl><type><name>const</name> <name>QSharedPointer<argument_list>&lt;<argument><name>RObject</name></argument>&gt;</argument_list></name>&amp;</type> <name>obj</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>endCycle</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>RTransaction</name></type> <name>apply</name><parameter_list>(<param><decl><type><name>RDocument</name>&amp;</type> <name>document</name></decl></param>, <param><decl><type><name>bool</name></type> <name>preview</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

<comment type="line">//    int getPreviewCounter() const {</comment>
<comment type="line">//        return previewCounter;</comment>
<comment type="line">//    }</comment>

<comment type="line">//    void setLimitPreview(bool on) {</comment>
<comment type="line">//        limitPreview = on;</comment>
<comment type="line">//    }</comment>

</public><protected>protected:
    <function_decl><type><name>void</name></type> <name>setMode</name><parameter_list>(<param><decl><type><name><name>RMixedOperation</name>::<name>Modes</name></name>&amp;</type> <name>modes</name></decl></param>, <param><decl><type><name><name>RMixedOperation</name>::<name>Mode</name></name></type> <name>mode</name></decl></param>, <param><decl><type><name>bool</name></type> <name>on</name> =<init> <expr><name>true</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>getMode</name><parameter_list>(<param><decl><type><name>const</name> <name><name>RMixedOperation</name>::<name>Modes</name></name>&amp;</type> <name>modes</name></decl></param>, <param><decl><type><name><name>RMixedOperation</name>::<name>Mode</name></name></type> <name>mode</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

</protected><private>private:
    <decl_stmt><decl><type><name>QList<argument_list>&lt;<argument><name>QPair<argument_list>&lt;<argument><name>QSharedPointer<argument_list>&lt;<argument><name>RObject</name></argument>&gt;</argument_list></name></argument>, <argument><name>Modes</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>list</name></decl>;</decl_stmt>
<comment type="line">//    int previewCounter;</comment>
<comment type="line">//    bool limitPreview;</comment>
</private>}</block>;</class>

<macro><name>Q_DECLARE_OPERATORS_FOR_FLAGS</name><argument_list>(<argument>RMixedOperation::Modes</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RMixedOperation::Mode</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RMixedOperation*</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
