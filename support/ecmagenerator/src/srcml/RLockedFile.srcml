<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./core" filename="RLockedFile.h"><comment type="block">/**
 * Copyright (c) 2011-2016 by Andrew Mustun. All rights reserved.
 * 
 * This file is part of the QCAD project.
 *
 * QCAD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QCAD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QCAD.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RLOCKEDFILE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RLOCKEDFILE_H</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"core_global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QtCore/QFile&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Q_OS_WIN</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QtCore/QVector&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<class>class <macro><name>QCADCORE_EXPORT</name></macro> <name>RLockedFile</name> <super>: <specifier>public</specifier> <name>QFile</name></super>
<block>{<private type="default">
</private><public>public:
    <enum>enum <name>LockMode</name> <block>{ <expr><name>NoLock</name> = 0</expr>, <expr><name>ReadLock</name></expr>, <expr><name>WriteLock</name></expr> }</block>;</enum>

    <constructor_decl><name>RLockedFile</name><parameter_list>()</parameter_list>;</constructor_decl>
    <constructor_decl><name>RLockedFile</name><parameter_list>(<param><decl><type><name>const</name> <name>QString</name> &amp;</type><name>name</name></decl></param>)</parameter_list>;</constructor_decl>
    <destructor_decl><name>~RLockedFile</name><parameter_list>()</parameter_list>;</destructor_decl>

    <function_decl><type><name>bool</name></type> <name>open</name><parameter_list>(<param><decl><type><name>OpenMode</name></type> <name>mode</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>bool</name></type> <name>lock</name><parameter_list>(<param><decl><type><name>LockMode</name></type> <name>mode</name></decl></param>, <param><decl><type><name>bool</name></type> <name>block</name> =<init> <expr><name>true</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>unlock</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>isLocked</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>LockMode</name></type> <name>lockMode</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

</public><private>private:
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>Q_OS_WIN</name></cpp:ifdef>
    <decl_stmt><decl><type><name><name>Qt</name>::<name>HANDLE</name></name></type> <name>wmutex</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Qt</name>::<name>HANDLE</name></name></type> <name>rmutex</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QVector<argument_list>&lt;<argument><name><name>Qt</name>::<name>HANDLE</name></name></argument>&gt;</argument_list></name></type> <name>rmutexes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QString</name></type> <name>mutexname</name></decl>;</decl_stmt>

    <function_decl><type><name><name>Qt</name>::<name>HANDLE</name></name></type> <name>getMutexHandle</name><parameter_list>(<param><decl><type><name>int</name></type> <name>idx</name></decl></param>, <param><decl><type><name>bool</name></type> <name>doCreate</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>waitMutex</name><parameter_list>(<param><decl><type><name><name>Qt</name>::<name>HANDLE</name></name></type> <name>mutex</name></decl></param>, <param><decl><type><name>bool</name></type> <name>doBlock</name></decl></param>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>LockMode</name></type> <name>m_lock_mode</name></decl>;</decl_stmt>
</private>}</block>;</class>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
