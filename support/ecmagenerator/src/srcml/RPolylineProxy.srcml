<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./core/math" filename="RPolylineProxy.h"><comment type="block">/**
 * Copyright (c) 2011-2016 by Andrew Mustun. All rights reserved.
 * 
 * This file is part of the QCAD project.
 *
 * QCAD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QCAD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QCAD.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RPOLYLINEPROXY_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RPOLYLINEPROXY_H</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../core_global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;RS.h&gt;</cpp:file></cpp:include>

<class_decl>class <name>RArc</name>;</class_decl>
<class_decl>class <name>RExporter</name>;</class_decl>
<class_decl>class <name>RLine</name>;</class_decl>
<class_decl>class <name>RPainterPath</name>;</class_decl>
<class_decl>class <name>RPolyline</name>;</class_decl>
<class_decl>class <name>RVector</name>;</class_decl>


<comment type="block">/**
 * Proxy for advanced polyline functionality. May be implemented
 * by a plugin.
 *
 * \ingroup math
 */</comment>
<class>class <macro><name>QCADCORE_EXPORT</name></macro> <name>RPolylineProxy</name> <block>{<private type="default">
</private><public>public:
    <destructor><specifier>virtual</specifier> <name>~RPolylineProxy</name><parameter_list>()</parameter_list> <block>{}</block></destructor>
    <function_decl><type><name>virtual</name> <name><name>RS</name>::<name>Ending</name></name></type> <name>getTrimEnd</name><parameter_list>(<param><decl><type><name>RPolyline</name>&amp;</type> <name>polyline</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>trimPoint</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>clickPoint</name></decl></param>)</parameter_list> <specifier>= 0</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>trimStartPoint</name><parameter_list>(<param><decl><type><name>RPolyline</name>&amp;</type> <name>polyline</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>trimPoint</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>clickPoint</name></decl></param>)</parameter_list> <specifier>= 0</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>trimEndPoint</name><parameter_list>(<param><decl><type><name>RPolyline</name>&amp;</type> <name>polyline</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>trimPoint</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>clickPoint</name></decl></param>)</parameter_list> <specifier>= 0</specifier>;</function_decl>

    <function_decl><type><name>virtual</name> <name>QList<argument_list>&lt;<argument><name>RPolyline</name></argument>&gt;</argument_list></name></type> <name>renderThickPolyline</name><parameter_list>(<param><decl><type><name>const</name> <name>RPolyline</name>&amp;</type> <name>polyline</name></decl></param>)</parameter_list> <specifier>= 0</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>QList<argument_list>&lt;<argument><name>RVector</name></argument>&gt;</argument_list></name></type> <name>verifyTangency</name><parameter_list>(<param><decl><type><name>const</name> <name>RPolyline</name>&amp;</type> <name>polyline</name></decl></param>, <param><decl><type><name>double</name></type> <name>toleranceMin</name> =<init> <expr><name><name>RS</name>::<name>AngleTolerance</name></name></expr></init></decl></param>, <param><decl><type><name>double</name></type> <name>toleranceMax</name> =<init> <expr><name>M_PI_4</name></expr></init></decl></param>)</parameter_list> <specifier>= 0</specifier>;</function_decl>
</public>}</block>;</class>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
