<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./core" filename="RMouseEvent.h"><comment type="block">/**
 * Copyright (c) 2011-2016 by Andrew Mustun. All rights reserved.
 * 
 * This file is part of the QCAD project.
 *
 * QCAD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QCAD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QCAD.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RMOUSEEVENT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RMOUSEEVENT_H</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"core_global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QMouseEvent&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RInputEvent.h"</cpp:file></cpp:include>

<class_decl>class <name>RGraphicsScene</name>;</class_decl>
<class_decl>class <name>RGraphicsView</name>;</class_decl>

<comment type="block">/**
 * \brief A mouse event for a \ref RGraphicsScene "graphics scene".
 *
 * The coordinates in a mouse event are available as scene coordinates
 * of screen coordinates from the view the event originated.
 *
 * \ingroup core
 * \scriptable
 */</comment>
<class>class <macro><name>QCADCORE_EXPORT</name></macro> <name>RMouseEvent</name><super>: <specifier>public</specifier> <name>QMouseEvent</name>, <specifier>public</specifier> <name>RInputEvent</name></super> <block>{<private type="default">
</private><public>public:
    <constructor_decl><name>RMouseEvent</name><parameter_list>(<param><decl><type><name><name>QEvent</name>::<name>Type</name></name></type> <name>type</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>position</name></decl></param>,
            <param><decl><type><name><name>Qt</name>::<name>MouseButton</name></name></type> <name>button</name></decl></param>, <param><decl><type><name><name>Qt</name>::<name>MouseButtons</name></name></type> <name>buttons</name></decl></param>,
            <param><decl><type><name><name>Qt</name>::<name>KeyboardModifiers</name></name></type> <name>modifiers</name></decl></param>, <param><decl><type><name>RGraphicsScene</name>&amp;</type> <name>s</name></decl></param>,
            <param><decl><type><name>RGraphicsView</name>&amp;</type> <name>v</name></decl></param>)</parameter_list>;</constructor_decl>

    <constructor_decl><name>RMouseEvent</name><parameter_list>(<param><decl><type><name>const</name> <name>QMouseEvent</name>&amp;</type> <name>mouseEvent</name></decl></param>, <param><decl><type><name>RGraphicsScene</name>&amp;</type> <name>s</name></decl></param>,
            <param><decl><type><name>RGraphicsView</name>&amp;</type> <name>v</name></decl></param>, <param><decl><type><name>qreal</name></type> <name>devicePixelRatio</name> =<init> <expr>1.0</expr></init></decl></param>)</parameter_list>;</constructor_decl>

    <destructor_decl><specifier>virtual</specifier> <name>~RMouseEvent</name><parameter_list>()</parameter_list>;</destructor_decl>

    <function_decl><type><name>static</name> <name>bool</name></type> <name>hasMouseMoved</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>void</name></type> <name>resetOriginalMousePos</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>static</name> <name>void</name></type> <name>setOriginalMousePos</name><parameter_list>(<param><decl><type><name>const</name> <name>QPoint</name>&amp;</type> <name>p</name></decl></param>)</parameter_list>;</function_decl>

</public><private>private:
    <decl_stmt><decl><type><name>static</name> <name>QPoint</name></type> <name>oriCursor</name></decl>;</decl_stmt>
</private>}</block>;</class>

<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RMouseEvent*</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
