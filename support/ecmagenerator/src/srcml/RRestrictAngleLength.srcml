<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./snap" filename="RRestrictAngleLength.h"><comment type="block">/**
 * Copyright (c) 2011-2016 by Andrew Mustun. All rights reserved.
 * 
 * This file is part of the QCAD project.
 *
 * QCAD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QCAD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QCAD.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RRESTRICTANGLELENGTH_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RRESTRICTANGLELENGTH_H</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snap_global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RSnapRestriction.h"</cpp:file></cpp:include>

<class_decl>class <name>RDocumentInterface</name>;</class_decl>

<comment type="block">/**
 * \brief Angle and length snap restriction implementation.
 *
 * \scriptable
 * \generateScriptShell
 *
 * \ingroup snap
 */</comment>
<class>class <macro><name>QCADSNAP_EXPORT</name></macro> <name>RRestrictAngleLength</name> <super>: <specifier>public</specifier> <name>RSnapRestriction</name></super> <block>{<private type="default">
</private><public>public:
    <enum>enum <name>AngleLengthMode</name> <block>{
        <expr><name>None</name></expr>,
        <expr><name>Angle</name></expr>,
        <expr><name>Length</name></expr>,
        <expr><name>AngleLength</name></expr>
    }</block>;</enum>

    <constructor><name>RRestrictAngleLength</name><parameter_list>(<param><decl><type><name>RDocumentInterface</name>*</type> <name>documentInterface</name> =<init> <expr><name>NULL</name></expr></init></decl></param>)</parameter_list> <member_list>:
        <call><name>RSnapRestriction</name><argument_list>(<argument><expr><name>documentInterface</name></expr></argument>)</argument_list></call>,
        <call><name>mode</name><argument_list>(<argument><expr><name><name>RRestrictAngleLength</name>::<name>AngleLength</name></name></expr></argument>)</argument_list></call>,
        <call><name>baseAngle</name><argument_list>(<argument><expr>0.0</expr></argument>)</argument_list></call>,
        <call><name>angle</name><argument_list>(<argument><expr>0.0</expr></argument>)</argument_list></call>,
        <call><name>baseLength</name><argument_list>(<argument><expr>0.0</expr></argument>)</argument_list></call>,
        <call><name>length</name><argument_list>(<argument><expr>0.0</expr></argument>)</argument_list></call> </member_list><block>{}</block></constructor>

    <constructor><name>RRestrictAngleLength</name><parameter_list>(<param><decl><type><name>RDocumentInterface</name>*</type> <name>documentInterface</name></decl></param>, <param><decl><type><name>double</name></type> <name>baseAngle</name></decl></param>, <param><decl><type><name>double</name></type> <name>angle</name></decl></param>, <param><decl><type><name>double</name></type> <name>baseLength</name></decl></param>, <param><decl><type><name>double</name></type> <name>length</name></decl></param>)</parameter_list>
        <member_list>: <call><name>RSnapRestriction</name><argument_list>(<argument><expr><name>documentInterface</name></expr></argument>)</argument_list></call>, 
          <call><name>mode</name><argument_list>(<argument><expr><name><name>RRestrictAngleLength</name>::<name>AngleLength</name></name></expr></argument>)</argument_list></call>,
          <call><name>baseAngle</name><argument_list>(<argument><expr><name>baseAngle</name></expr></argument>)</argument_list></call>, <call><name>angle</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call>,
          <call><name>baseLength</name><argument_list>(<argument><expr><name>baseLength</name></expr></argument>)</argument_list></call>, <call><name>length</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call> </member_list><block>{}</block></constructor>

    <destructor><specifier>virtual</specifier> <name>~RRestrictAngleLength</name><parameter_list>()</parameter_list> <block>{}</block></destructor>

    <function_decl><type><name>virtual</name> <name>RVector</name></type> <name>restrictSnap</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>position</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>relativeZero</name></decl></param>)</parameter_list>;</function_decl>

    <function><type><name>virtual</name> <name>void</name></type> <name>setBaseAngle</name><parameter_list>(<param><decl><type><name>double</name></type> <name>a</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>baseAngle</name> = <name>a</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>virtual</name> <name>void</name></type> <name>setAngle</name><parameter_list>(<param><decl><type><name>double</name></type> <name>a</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>angle</name> = <name>a</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>virtual</name> <name>void</name></type> <name>setBaseLength</name><parameter_list>(<param><decl><type><name>double</name></type> <name>l</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>baseLength</name> = <name>l</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>virtual</name> <name>void</name></type> <name>setLength</name><parameter_list>(<param><decl><type><name>double</name></type> <name>l</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>length</name> = <name>l</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>virtual</name> <name>void</name></type> <name>setRestrictAngle</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>on</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>mode</name>==<name>None</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>mode</name> = <name>Angle</name></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>mode</name>==<name>Length</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>mode</name> = <name>AngleLength</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then>
        <else>else <block>{
            <if>if <condition>(<expr><name>mode</name>==<name>Angle</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>mode</name> = <name>None</name></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>mode</name>==<name>AngleLength</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>mode</name> = <name>Length</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if>
    }</block></function>

    <function><type><name>virtual</name> <name>void</name></type> <name>setRestrictLength</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>on</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>mode</name>==<name>None</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>mode</name> = <name>Length</name></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>mode</name>==<name>Angle</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>mode</name> = <name>AngleLength</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then>
        <else>else <block>{
            <if>if <condition>(<expr><name>mode</name>==<name>Length</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>mode</name> = <name>None</name></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>mode</name>==<name>AngleLength</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>mode</name> = <name>Angle</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if>
    }</block></function>

</public><protected>protected:
    <decl_stmt><decl><type><name>AngleLengthMode</name></type> <name>mode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>baseAngle</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>angle</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>baseLength</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>length</name></decl>;</decl_stmt>
</protected>}</block>;</class>

<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RRestrictAngleLength*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RRestrictAngleLength::AngleLengthMode</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
