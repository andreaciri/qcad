<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./core/math" filename="RTextLabel.h"><comment type="block">/**
 * Copyright (c) 2011-2016 by Andrew Mustun. All rights reserved.
 * 
 * This file is part of the QCAD project.
 *
 * QCAD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QCAD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QCAD.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RTEXTLABEL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RTEXTLABEL_H</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../core_global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RPoint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RVector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RBox.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RDEFAULT_QVARIANT</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RDEFAULT_QVARIANT</name> <name>QVariant</name>()</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/**
 * Text label. Mainly used to add to preview as information 
 * for the user, e.g. to display current snap mode.
 *
 * \ingroup math
 * \scriptable
 * \sharedPointerSupport
 * \copyable
 */</comment>
<class>class <macro><name>QCADCORE_EXPORT</name></macro> <name>RTextLabel</name><super>: <specifier>public</specifier> <name>RPoint</name></super> <block>{<private type="default">
</private><public>public:
    <constructor_decl><name>RTextLabel</name><parameter_list>()</parameter_list>;</constructor_decl>
    <constructor_decl><name>RTextLabel</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>position</name></decl></param>, <param><decl><type><name>const</name> <name>QString</name>&amp;</type> <name>text</name></decl></param>, <param><decl><type><name>const</name> <name>QVariant</name>&amp;</type> <name>userData</name> =<init> <expr><name>RDEFAULT_QVARIANT</name></expr></init></decl></param>)</parameter_list>;</constructor_decl>
    <destructor_decl><specifier>virtual</specifier> <name>~RTextLabel</name><parameter_list>()</parameter_list>;</destructor_decl>

    <function><type><name>virtual</name> <name>RTextLabel</name>*</type> <name>clone</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr>new <call><name>RTextLabel</name><argument_list>(<argument><expr>*<name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>QString</name></type> <name>getText</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>text</name></expr>;</return>
    }</block></function>
    <function><type><name>QVariant</name></type> <name>getUserData</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>userData</name></expr>;</return>
    }</block></function>

</public><protected>protected:
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>print</name><parameter_list>(<param><decl><type><name>QDebug</name></type> <name>dbg</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

</protected><public>public:
    <decl_stmt><decl><type><name>QString</name></type> <name>text</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QVariant</name></type> <name>userData</name></decl>;</decl_stmt>
</public>}</block>;</class>

<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RTextLabel</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RTextLabel*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>QSharedPointer&lt;RTextLabel&gt;</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>QSharedPointer&lt;RTextLabel&gt;*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>QList&lt;RTextLabel&gt;</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
