<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./core" filename="REntityPickEvent.h"><comment type="block">/**
 * Copyright (c) 2011-2016 by Andrew Mustun. All rights reserved.
 * 
 * This file is part of the QCAD project.
 *
 * QCAD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QCAD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QCAD.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RENTITYPICKEVENT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RENTITYPICKEVENT_H</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"core_global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RInputEvent.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"REntity.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RVector.h"</cpp:file></cpp:include>

<class_decl>class <name>RGraphicsView</name>;</class_decl>
<class_decl>class <name>RGraphicsScene</name>;</class_decl>

<comment type="block">/**
 * Entity pick event.
 *
 * \ingroup core
 * \scriptable
 */</comment>
<class>class <macro><name>QCADCORE_EXPORT</name></macro> <name>REntityPickEvent</name> <super>: <specifier>public</specifier> <name>RInputEvent</name></super> <block>{<private type="default">
</private><public>public:
    <comment type="block">/**
     * \param entityId ID of picked entity.
     * \param pos Absolute coordinate.
     */</comment>
    <constructor_decl><name>REntityPickEvent</name><parameter_list>(<param><decl><type><name><name>REntity</name>::<name>Id</name></name></type> <name>entityId</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>position</name></decl></param>,
       <param><decl><type><name>RGraphicsScene</name>&amp;</type> <name>s</name></decl></param>, <param><decl><type><name>RGraphicsView</name>&amp;</type> <name>v</name></decl></param>)</parameter_list>;</constructor_decl>

    <comment type="block">/**
     * \return The ID of the picked entity or REntity::INVALID_ID.
     */</comment>
    <function><type><name><name>REntity</name>::<name>Id</name></name></type> <name>getEntityId</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>entityId</name></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setModifiers</name><parameter_list>(<param><decl><type><name><name>Qt</name>::<name>KeyboardModifiers</name></name></type> <name>m</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>mods</name> = <name>m</name></expr>;</expr_stmt>
    }</block></function>
    <function><type><name><name>Qt</name>::<name>KeyboardModifiers</name></name></type> <name>getModifiers</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>mods</name></expr>;</return>
    }</block></function>

    <comment type="block">/**
     * \return true If the entity ID of the event is valid.
     */</comment>
    <function><type><name>bool</name></type> <name>isValid</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>entityId</name>!=<name><name>REntity</name>::<name>INVALID_ID</name></name></expr>;</return>
    }</block></function>

</public><private>private:
    <decl_stmt><decl><type><name><name>REntity</name>::<name>Id</name></name></type> <name>entityId</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Qt</name>::<name>KeyboardModifiers</name></name></type> <name>mods</name></decl>;</decl_stmt>
</private>}</block>;</class>

<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>REntityPickEvent*</argument>)</argument_list></macro>
<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>const REntityPickEvent*</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
