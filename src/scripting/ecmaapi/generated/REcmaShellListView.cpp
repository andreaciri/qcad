


	// ***** AUTOGENERATED CODE, DO NOT EDIT *****
    
        #include "REcmaShellListView.h"
        #include "RMetaTypes.h"
        #include "../REcmaHelper.h"

        // forwards declarations mapped to includes
        
            
        // includes for base ecma wrapper classes
        

            #define QTSCRIPT_IS_GENERATED_FUNCTION(fun) ((fun.data().toUInt32() & 0xFFFF0000) == 0xBABE0000)
            #define QTSCRIPT_IS_FUNCTION_IN_CALL(fun) ((fun.data().toUInt32() & 0x0000F000) == 0x0000B000)

        
    // Destructor:
    REcmaShellListView::~REcmaShellListView() {}
        RListView* REcmaShellListView::getSelf(const QString& fName, QScriptContext* context)
    
        {
            RListView* self = NULL;

            
                // self could be a normal object (e.g. from an UI file) or
                // an ECMA shell object (made from an ECMA script):
                //self = getSelfShell(fName, context);
                

            //if (self==NULL) {
                self = REcmaHelper::scriptValueTo<RListView >(context->thisObject())
                
                ;
            //}

            if (self == NULL){
                // avoid recursion (toString is used by the backtrace):
                if (fName!="toString") {
                    REcmaHelper::throwError(QString("RListView.%1(): "
                        "This object is not a RListView").arg(fName),
                        context);
                }
                return NULL;
            }

            return self;
        }
        REcmaShellListView* REcmaShellListView::getSelfShell(const QString& fName, QScriptContext* context)
    
        {
          RListView* selfBase = getSelf(fName, context);
                REcmaShellListView* self = dynamic_cast<REcmaShellListView*>(selfBase);
                //return REcmaHelper::scriptValueTo<REcmaShellListView >(context->thisObject());
            if(self == NULL){
                REcmaHelper::throwError(QString("RListView.%1(): "
                    "This object is not a RListView").arg(fName),
                    context);
            }

            return self;
            


        }
        
    
    
    // Constructors:
    
      REcmaShellListView::REcmaShellListView(
                QWidget * parent
            ) : RListView(
                parent
                ) {
            }
        
    
    
      void REcmaShellListView::contextMenuEvent(
                QContextMenuEvent * e
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellListView::contextMenuEvent", engine);
                QScriptValue _q_function = __qtscript_self.property("contextMenuEvent");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=1*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RListView::contextMenuEvent";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RListView::contextMenuEvent(
                            e
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellListView::contextMenuEvent", engine);

                        
                            return;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                        // temporary make protected function scriptable, only from the context of this function call:
                        QScriptValue proto = engine->defaultPrototype(qMetaTypeId<RListView*>());
                        REcmaHelper::registerFunction(engine, &proto, contextMenuEvent, "contextMenuEvent");
                        
                            _q_function.call(__qtscript_self,
                                QScriptValueList()
                                



    // type: QContextMenuEvent *, copyable: false
        << qScriptValueFromValue(engine, 

        e
        )
      
                            )
                        
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellListView::contextMenuEvent", engine);

                    
            }
        
    
    
      void REcmaShellListView::mousePressEvent(
                QMouseEvent * e
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellListView::mousePressEvent", engine);
                QScriptValue _q_function = __qtscript_self.property("mousePressEvent");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=1*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RListView::mousePressEvent";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RListView::mousePressEvent(
                            e
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellListView::mousePressEvent", engine);

                        
                            return;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                        // temporary make protected function scriptable, only from the context of this function call:
                        QScriptValue proto = engine->defaultPrototype(qMetaTypeId<RListView*>());
                        REcmaHelper::registerFunction(engine, &proto, mousePressEvent, "mousePressEvent");
                        
                            _q_function.call(__qtscript_self,
                                QScriptValueList()
                                



    // type: QMouseEvent *, copyable: true
        << qScriptValueFromValue(engine, 

        e
        )
      
                            )
                        
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellListView::mousePressEvent", engine);

                    
            }
        
    
    
      void REcmaShellListView::mouseReleaseEvent(
                QMouseEvent * e
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellListView::mouseReleaseEvent", engine);
                QScriptValue _q_function = __qtscript_self.property("mouseReleaseEvent");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=1*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RListView::mouseReleaseEvent";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RListView::mouseReleaseEvent(
                            e
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellListView::mouseReleaseEvent", engine);

                        
                            return;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                        // temporary make protected function scriptable, only from the context of this function call:
                        QScriptValue proto = engine->defaultPrototype(qMetaTypeId<RListView*>());
                        REcmaHelper::registerFunction(engine, &proto, mouseReleaseEvent, "mouseReleaseEvent");
                        
                            _q_function.call(__qtscript_self,
                                QScriptValueList()
                                



    // type: QMouseEvent *, copyable: true
        << qScriptValueFromValue(engine, 

        e
        )
      
                            )
                        
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellListView::mouseReleaseEvent", engine);

                    
            }
        
    
    
      void REcmaShellListView::mouseMoveEvent(
                QMouseEvent * e
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellListView::mouseMoveEvent", engine);
                QScriptValue _q_function = __qtscript_self.property("mouseMoveEvent");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=1*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RListView::mouseMoveEvent";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RListView::mouseMoveEvent(
                            e
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellListView::mouseMoveEvent", engine);

                        
                            return;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                        // temporary make protected function scriptable, only from the context of this function call:
                        QScriptValue proto = engine->defaultPrototype(qMetaTypeId<RListView*>());
                        REcmaHelper::registerFunction(engine, &proto, mouseMoveEvent, "mouseMoveEvent");
                        
                            _q_function.call(__qtscript_self,
                                QScriptValueList()
                                



    // type: QMouseEvent *, copyable: true
        << qScriptValueFromValue(engine, 

        e
        )
      
                            )
                        
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellListView::mouseMoveEvent", engine);

                    
            }
        
    
    
      void REcmaShellListView::dragEnterEvent(
                QDragEnterEvent * e
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellListView::dragEnterEvent", engine);
                QScriptValue _q_function = __qtscript_self.property("dragEnterEvent");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=1*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RListView::dragEnterEvent";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RListView::dragEnterEvent(
                            e
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellListView::dragEnterEvent", engine);

                        
                            return;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                        // temporary make protected function scriptable, only from the context of this function call:
                        QScriptValue proto = engine->defaultPrototype(qMetaTypeId<RListView*>());
                        REcmaHelper::registerFunction(engine, &proto, dragEnterEvent, "dragEnterEvent");
                        
                            _q_function.call(__qtscript_self,
                                QScriptValueList()
                                



    // type: QDragEnterEvent *, copyable: false
        << qScriptValueFromValue(engine, 

        e
        )
      
                            )
                        
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellListView::dragEnterEvent", engine);

                    
            }
        
    
    
      void REcmaShellListView::dragMoveEvent(
                QDragMoveEvent * e
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellListView::dragMoveEvent", engine);
                QScriptValue _q_function = __qtscript_self.property("dragMoveEvent");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=1*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RListView::dragMoveEvent";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RListView::dragMoveEvent(
                            e
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellListView::dragMoveEvent", engine);

                        
                            return;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                        // temporary make protected function scriptable, only from the context of this function call:
                        QScriptValue proto = engine->defaultPrototype(qMetaTypeId<RListView*>());
                        REcmaHelper::registerFunction(engine, &proto, dragMoveEvent, "dragMoveEvent");
                        
                            _q_function.call(__qtscript_self,
                                QScriptValueList()
                                



    // type: QDragMoveEvent *, copyable: false
        << qScriptValueFromValue(engine, 

        e
        )
      
                            )
                        
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellListView::dragMoveEvent", engine);

                    
            }
        
    
    
      void REcmaShellListView::dropEvent(
                QDropEvent * e
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellListView::dropEvent", engine);
                QScriptValue _q_function = __qtscript_self.property("dropEvent");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=1*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RListView::dropEvent";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RListView::dropEvent(
                            e
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellListView::dropEvent", engine);

                        
                            return;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                        // temporary make protected function scriptable, only from the context of this function call:
                        QScriptValue proto = engine->defaultPrototype(qMetaTypeId<RListView*>());
                        REcmaHelper::registerFunction(engine, &proto, dropEvent, "dropEvent");
                        
                            _q_function.call(__qtscript_self,
                                QScriptValueList()
                                



    // type: QDropEvent *, copyable: false
        << qScriptValueFromValue(engine, 

        e
        )
      
                            )
                        
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellListView::dropEvent", engine);

                    
            }
        
    
    
      void REcmaShellListView::startDrag(
                Qt::DropActions supportedActions
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellListView::startDrag", engine);
                QScriptValue _q_function = __qtscript_self.property("startDrag");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=1*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RListView::startDrag";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RListView::startDrag(
                            supportedActions
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellListView::startDrag", engine);

                        
                            return;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                        // temporary make protected function scriptable, only from the context of this function call:
                        QScriptValue proto = engine->defaultPrototype(qMetaTypeId<RListView*>());
                        REcmaHelper::registerFunction(engine, &proto, startDrag, "startDrag");
                        
                            _q_function.call(__qtscript_self,
                                QScriptValueList()
                                



    // type: Qt::DropActions, copyable: true
        << qScriptValueFromValue(engine, 

        supportedActions
        )
      
                            )
                        
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellListView::startDrag", engine);

                    
            }
        
    
    
      void REcmaShellListView::selectionChanged(
                const QItemSelection & selected, const QItemSelection & deselected
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellListView::selectionChanged", engine);
                QScriptValue _q_function = __qtscript_self.property("selectionChanged");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=2*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RListView::selectionChanged";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RListView::selectionChanged(
                            selected, deselected
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellListView::selectionChanged", engine);

                        
                            return;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                        // temporary make protected function scriptable, only from the context of this function call:
                        QScriptValue proto = engine->defaultPrototype(qMetaTypeId<RListView*>());
                        REcmaHelper::registerFunction(engine, &proto, selectionChanged, "selectionChanged");
                        
                            _q_function.call(__qtscript_self,
                                QScriptValueList()
                                



    // type: QItemSelection &, copyable: false
        << qScriptValueFromValue(engine, 

        
            // const reference argument - make a new object:
            new QItemSelection(selected)
        )
      



    // type: QItemSelection &, copyable: false
        << qScriptValueFromValue(engine, 

        
            // const reference argument - make a new object:
            new QItemSelection(deselected)
        )
      
                            )
                        
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellListView::selectionChanged", engine);

                    
            }
        
    
    
      void REcmaShellListView::currentChanged(
                const QModelIndex & current, const QModelIndex & previous
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellListView::currentChanged", engine);
                QScriptValue _q_function = __qtscript_self.property("currentChanged");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=2*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RListView::currentChanged";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RListView::currentChanged(
                            current, previous
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellListView::currentChanged", engine);

                        
                            return;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                        // temporary make protected function scriptable, only from the context of this function call:
                        QScriptValue proto = engine->defaultPrototype(qMetaTypeId<RListView*>());
                        REcmaHelper::registerFunction(engine, &proto, currentChanged, "currentChanged");
                        
                            _q_function.call(__qtscript_self,
                                QScriptValueList()
                                



    // type: QModelIndex &, copyable: false
        << qScriptValueFromValue(engine, 

        
            // const reference argument - make a new object:
            new QModelIndex(current)
        )
      



    // type: QModelIndex &, copyable: false
        << qScriptValueFromValue(engine, 

        
            // const reference argument - make a new object:
            new QModelIndex(previous)
        )
      
                            )
                        
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellListView::currentChanged", engine);

                    
            }
        
    
  

    // protected methods (only available for ECMA shell classes) (generated by xsl2xpp.xsl):
	 QScriptValue
        REcmaShellListView::contextMenuEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaShellListView::contextMenuEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaShellListView::contextMenuEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // protected function: can only be called from ECMA shell:
                    REcmaShellListView* self = 
                        getSelfShell("", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QContextMenuEvent * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    QContextMenuEvent * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<QContextMenuEvent >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RListView: Argument 0 is not of type QContextMenuEvent *QContextMenuEvent *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->RListView::contextMenuEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RListView.contextMenuEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaShellListView::contextMenuEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaShellListView::mousePressEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaShellListView::mousePressEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaShellListView::mousePressEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // protected function: can only be called from ECMA shell:
                    REcmaShellListView* self = 
                        getSelfShell("", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant()
        ) /* type: QMouseEvent * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    QMouseEvent * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<QMouseEvent >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RListView: Argument 0 is not of type QMouseEvent *QMouseEvent *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->RListView::mousePressEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RListView.mousePressEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaShellListView::mousePressEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaShellListView::mouseReleaseEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaShellListView::mouseReleaseEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaShellListView::mouseReleaseEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // protected function: can only be called from ECMA shell:
                    REcmaShellListView* self = 
                        getSelfShell("", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant()
        ) /* type: QMouseEvent * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    QMouseEvent * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<QMouseEvent >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RListView: Argument 0 is not of type QMouseEvent *QMouseEvent *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->RListView::mouseReleaseEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RListView.mouseReleaseEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaShellListView::mouseReleaseEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaShellListView::mouseMoveEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaShellListView::mouseMoveEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaShellListView::mouseMoveEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // protected function: can only be called from ECMA shell:
                    REcmaShellListView* self = 
                        getSelfShell("", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant()
        ) /* type: QMouseEvent * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    QMouseEvent * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<QMouseEvent >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RListView: Argument 0 is not of type QMouseEvent *QMouseEvent *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->RListView::mouseMoveEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RListView.mouseMoveEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaShellListView::mouseMoveEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaShellListView::dragEnterEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaShellListView::dragEnterEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaShellListView::dragEnterEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // protected function: can only be called from ECMA shell:
                    REcmaShellListView* self = 
                        getSelfShell("", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QDragEnterEvent * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    QDragEnterEvent * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<QDragEnterEvent >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RListView: Argument 0 is not of type QDragEnterEvent *QDragEnterEvent *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->RListView::dragEnterEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RListView.dragEnterEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaShellListView::dragEnterEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaShellListView::dragMoveEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaShellListView::dragMoveEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaShellListView::dragMoveEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // protected function: can only be called from ECMA shell:
                    REcmaShellListView* self = 
                        getSelfShell("", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QDragMoveEvent * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    QDragMoveEvent * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<QDragMoveEvent >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RListView: Argument 0 is not of type QDragMoveEvent *QDragMoveEvent *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->RListView::dragMoveEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RListView.dragMoveEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaShellListView::dragMoveEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaShellListView::dropEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaShellListView::dropEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaShellListView::dropEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // protected function: can only be called from ECMA shell:
                    REcmaShellListView* self = 
                        getSelfShell("", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QDropEvent * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    QDropEvent * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<QDropEvent >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RListView: Argument 0 is not of type QDropEvent *QDropEvent *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->RListView::dropEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RListView.dropEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaShellListView::dropEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaShellListView::startDrag
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaShellListView::startDrag", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaShellListView::startDrag";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // protected function: can only be called from ECMA shell:
                    REcmaShellListView* self = 
                        getSelfShell("", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: Qt::DropActions */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    Qt::DropActions
                    a0 =
                    (Qt::DropActions)
                    (int)
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->RListView::startDrag(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RListView.startDrag().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaShellListView::startDrag", context, engine);
            return result;
        }
         QScriptValue
        REcmaShellListView::selectionChanged
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaShellListView::selectionChanged", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaShellListView::selectionChanged";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // protected function: can only be called from ECMA shell:
                    REcmaShellListView* self = 
                        getSelfShell("", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QItemSelection */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: QItemSelection */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QItemSelection*
                    ap0 =
                    qscriptvalue_cast<
                    QItemSelection*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RListView: Argument 0 is not of type QItemSelection*.",
                               context);                    
                    }
                    QItemSelection& a0 = *ap0;
                
                    // argument is reference
                    QItemSelection*
                    ap1 =
                    qscriptvalue_cast<
                    QItemSelection*
                        >(
                        context->argument(
                        1
                        )
                    );
                    if( ap1 == NULL ){
                           return REcmaHelper::throwError("RListView: Argument 1 is not of type QItemSelection*.",
                               context);                    
                    }
                    QItemSelection& a1 = *ap1;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->RListView::selectionChanged(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RListView.selectionChanged().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaShellListView::selectionChanged", context, engine);
            return result;
        }
         QScriptValue
        REcmaShellListView::currentChanged
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaShellListView::currentChanged", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaShellListView::currentChanged";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // protected function: can only be called from ECMA shell:
                    REcmaShellListView* self = 
                        getSelfShell("", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QModelIndex */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: QModelIndex */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QModelIndex*
                    ap0 =
                    qscriptvalue_cast<
                    QModelIndex*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RListView: Argument 0 is not of type QModelIndex*.",
                               context);                    
                    }
                    QModelIndex& a0 = *ap0;
                
                    // argument is reference
                    QModelIndex*
                    ap1 =
                    qscriptvalue_cast<
                    QModelIndex*
                        >(
                        context->argument(
                        1
                        )
                    );
                    if( ap1 == NULL ){
                           return REcmaHelper::throwError("RListView: Argument 1 is not of type QModelIndex*.",
                               context);                    
                    }
                    QModelIndex& a1 = *ap1;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->RListView::currentChanged(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RListView.currentChanged().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaShellListView::currentChanged", context, engine);
            return result;
        }
        