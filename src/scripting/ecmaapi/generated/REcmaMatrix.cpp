// ***** AUTOGENERATED CODE, DO NOT EDIT *****
            // ***** This class is copyable.
        
        #include "REcmaMatrix.h"
        #include "RMetaTypes.h"
        #include "../REcmaHelper.h"

        // forwards declarations mapped to includes
        
            
        // includes for base ecma wrapper classes
         void REcmaMatrix::initEcma(QScriptEngine& engine, QScriptValue* proto 
    
    ) 
    
    {

    bool protoCreated = false;
    if(proto == NULL){
        proto = new QScriptValue(engine.newVariant(qVariantFromValue(
                (RMatrix*) 0)));
        protoCreated = true;
    }

    

    QScriptValue fun;

    // toString:
    REcmaHelper::registerFunction(&engine, proto, toString, "toString");
    
    // copy:
    REcmaHelper::registerFunction(&engine, proto, copy, "copy");
    

    // destroy:
    REcmaHelper::registerFunction(&engine, proto, destroy, "destroy");
    

    // get class name
    REcmaHelper::registerFunction(&engine, proto, getClassName, "getClassName");
    

    // conversion to all base classes (multiple inheritance):
    REcmaHelper::registerFunction(&engine, proto, getBaseClasses, "getBaseClasses");
    

    // properties:
    

    // methods:
    
            REcmaHelper::registerFunction(&engine, proto, isValid, "isValid");
            
            REcmaHelper::registerFunction(&engine, proto, operator_multiply, "operator_multiply");
            
            REcmaHelper::registerFunction(&engine, proto, multiplyWith, "multiplyWith");
            
            REcmaHelper::registerFunction(&engine, proto, init, "init");
            
            REcmaHelper::registerFunction(&engine, proto, reset, "reset");
            
            REcmaHelper::registerFunction(&engine, proto, clear, "clear");
            
            REcmaHelper::registerFunction(&engine, proto, set3x3, "set3x3");
            
            REcmaHelper::registerFunction(&engine, proto, set3x1, "set3x1");
            
            REcmaHelper::registerFunction(&engine, proto, set2x3, "set2x3");
            
            REcmaHelper::registerFunction(&engine, proto, set, "set");
            
            REcmaHelper::registerFunction(&engine, proto, get, "get");
            
            REcmaHelper::registerFunction(&engine, proto, getRows, "getRows");
            
            REcmaHelper::registerFunction(&engine, proto, getCols, "getCols");
            
            REcmaHelper::registerFunction(&engine, proto, rref, "rref");
            
            REcmaHelper::registerFunction(&engine, proto, getInverse, "getInverse");
            
            REcmaHelper::registerFunction(&engine, proto, getTransposed, "getTransposed");
            
            REcmaHelper::registerFunction(&engine, proto, getAppended, "getAppended");
            
            REcmaHelper::registerFunction(&engine, proto, isRotationAndUniformScale, "isRotationAndUniformScale");
            
            REcmaHelper::registerFunction(&engine, proto, getUniformScaleFactor, "getUniformScaleFactor");
            
            REcmaHelper::registerFunction(&engine, proto, getRotationAngle, "getRotationAngle");
            
        engine.setDefaultPrototype(
            qMetaTypeId<RMatrix*>(), *proto);

        
                engine.setDefaultPrototype(qMetaTypeId<
                RMatrix
                > (), *proto);
            
    

    QScriptValue ctor = engine.newFunction(createEcma, *proto, 2);
    
    // static methods:
    
            REcmaHelper::registerFunction(&engine, &ctor, createIdentity2x2, "createIdentity2x2");
            
            REcmaHelper::registerFunction(&engine, &ctor, createIdentity3x3, "createIdentity3x3");
            
            REcmaHelper::registerFunction(&engine, &ctor, createIdentity, "createIdentity");
            
            REcmaHelper::registerFunction(&engine, &ctor, createRotation, "createRotation");
            
            REcmaHelper::registerFunction(&engine, &ctor, create2x2, "create2x2");
            
            REcmaHelper::registerFunction(&engine, &ctor, create3x3, "create3x3");
            
            REcmaHelper::registerFunction(&engine, &ctor, create3x1, "create3x1");
            
            REcmaHelper::registerFunction(&engine, &ctor, create2x3, "create2x3");
            

    // static properties:
    

    // enum values:
    

    // enum conversions:
    
        
    // init class:
    engine.globalObject().setProperty("RMatrix",
    ctor, QScriptValue::SkipInEnumeration);
    
    if( protoCreated ){
       delete proto;
    }
    
    }
     QScriptValue REcmaMatrix::createEcma(QScriptContext* context, QScriptEngine* engine) 
    
    {
    if (context->thisObject().strictlyEquals(
       engine->globalObject())) {
       return REcmaHelper::throwError(
       QString::fromLatin1("RMatrix(): Did you forget to construct with 'new'?"),
           context);
    }

    QScriptValue result;
        
            // generate constructor variants:
            
    if( context->argumentCount() ==
        0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ constructor:
    
            // copyable class:
            RMatrix
                    cppResult;
                
            result = engine->newVariant(
            context->thisObject(), qVariantFromValue(cppResult));
        
    } else 

    if( context->argumentCount() ==
        2
                && (
                
                        context->argument(
                        0
                        ).isNumber()
                ) /* type: int */
            
                && (
                
                        context->argument(
                        1
                        ).isNumber()
                ) /* type: int */
            
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    int
                    a1 =
                    (int)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ constructor:
    
            // copyable class:
            RMatrix
                    cppResult(
                    a0
        ,
    a1
                    );
                
            result = engine->newVariant(
            context->thisObject(), qVariantFromValue(cppResult));
        
    } else 

    if( context->argumentCount() ==
        1
                && (
                
                        context->argument(
                        0
                        ).isVariant()
                        ||
                    
                        context->argument(
                        0
                        ).isQObject()
                        ||
                    
                        context->argument(
                        0
                        ).isNull()
                ) /* type: RMatrix */
            
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RMatrix*
                    ap0 =
                    qscriptvalue_cast<
                    RMatrix*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RMatrix: Argument 0 is not of type RMatrix.",
                               context);                    
                    }
                    RMatrix 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ constructor:
    
            // copyable class:
            RMatrix
                    cppResult(
                    a0
                    );
                
            result = engine->newVariant(
            context->thisObject(), qVariantFromValue(cppResult));
        
    } else 

    {
       return REcmaHelper::throwError(
       QString::fromLatin1("RMatrix(): no matching constructor found."),
           context);
    }
    
    return result;
    }
    

    // conversion functions for base classes:
    

    // returns class name:
     QScriptValue REcmaMatrix::getClassName(QScriptContext *context, QScriptEngine *engine) 
        
    {
        return qScriptValueFromValue(engine, QString("RMatrix"));
    }
    

    // returns all base classes (in case of multiple inheritance):
     QScriptValue REcmaMatrix::getBaseClasses(QScriptContext *context, QScriptEngine *engine) 
        
    {
        QStringList list;
        

        return qScriptValueFromSequence(engine, list);
    }
    

    // properties:
    

    // public methods:
     QScriptValue
        REcmaMatrix::isValid
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMatrix::isValid", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMatrix::isValid";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMatrix* self = 
                        getSelf("isValid", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isValid();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMatrix.isValid().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMatrix::isValid", context, engine);
            return result;
        }
         QScriptValue
        REcmaMatrix::createIdentity2x2
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMatrix::createIdentity2x2", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMatrix::createIdentity2x2";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RMatrix'
    RMatrix cppResult =
        RMatrix::
       createIdentity2x2();
        // return type: RMatrix
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMatrix.createIdentity2x2().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMatrix::createIdentity2x2", context, engine);
            return result;
        }
         QScriptValue
        REcmaMatrix::createIdentity3x3
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMatrix::createIdentity3x3", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMatrix::createIdentity3x3";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RMatrix'
    RMatrix cppResult =
        RMatrix::
       createIdentity3x3();
        // return type: RMatrix
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMatrix.createIdentity3x3().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMatrix::createIdentity3x3", context, engine);
            return result;
        }
         QScriptValue
        REcmaMatrix::createIdentity
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMatrix::createIdentity", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMatrix::createIdentity";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'RMatrix'
    RMatrix cppResult =
        RMatrix::
       createIdentity(a0);
        // return type: RMatrix
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMatrix.createIdentity().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMatrix::createIdentity", context, engine);
            return result;
        }
         QScriptValue
        REcmaMatrix::createRotation
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMatrix::createRotation", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMatrix::createRotation";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'RMatrix'
    RMatrix cppResult =
        RMatrix::
       createRotation(a0);
        // return type: RMatrix
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMatrix.createRotation().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMatrix::createRotation", context, engine);
            return result;
        }
         QScriptValue
        REcmaMatrix::create2x2
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMatrix::create2x2", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMatrix::create2x2";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    4 && (
            context->argument(0).isNumber()
        ) /* type: double */
     && (
            context->argument(1).isNumber()
        ) /* type: double */
     && (
            context->argument(2).isNumber()
        ) /* type: double */
     && (
            context->argument(3).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a2 =
                    (double)
                    
                    context->argument( 2 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a3 =
                    (double)
                    
                    context->argument( 3 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'RMatrix'
    RMatrix cppResult =
        RMatrix::
       create2x2(a0
        ,
    a1
        ,
    a2
        ,
    a3);
        // return type: RMatrix
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMatrix.create2x2().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMatrix::create2x2", context, engine);
            return result;
        }
         QScriptValue
        REcmaMatrix::create3x3
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMatrix::create3x3", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMatrix::create3x3";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    9 && (
            context->argument(0).isNumber()
        ) /* type: double */
     && (
            context->argument(1).isNumber()
        ) /* type: double */
     && (
            context->argument(2).isNumber()
        ) /* type: double */
     && (
            context->argument(3).isNumber()
        ) /* type: double */
     && (
            context->argument(4).isNumber()
        ) /* type: double */
     && (
            context->argument(5).isNumber()
        ) /* type: double */
     && (
            context->argument(6).isNumber()
        ) /* type: double */
     && (
            context->argument(7).isNumber()
        ) /* type: double */
     && (
            context->argument(8).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a2 =
                    (double)
                    
                    context->argument( 2 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a3 =
                    (double)
                    
                    context->argument( 3 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a4 =
                    (double)
                    
                    context->argument( 4 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a5 =
                    (double)
                    
                    context->argument( 5 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a6 =
                    (double)
                    
                    context->argument( 6 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a7 =
                    (double)
                    
                    context->argument( 7 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a8 =
                    (double)
                    
                    context->argument( 8 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'RMatrix'
    RMatrix cppResult =
        RMatrix::
       create3x3(a0
        ,
    a1
        ,
    a2
        ,
    a3
        ,
    a4
        ,
    a5
        ,
    a6
        ,
    a7
        ,
    a8);
        // return type: RMatrix
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMatrix.create3x3().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMatrix::create3x3", context, engine);
            return result;
        }
         QScriptValue
        REcmaMatrix::create3x1
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMatrix::create3x1", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMatrix::create3x1";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isNumber()
        ) /* type: double */
     && (
            context->argument(1).isNumber()
        ) /* type: double */
     && (
            context->argument(2).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a2 =
                    (double)
                    
                    context->argument( 2 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'RMatrix'
    RMatrix cppResult =
        RMatrix::
       create3x1(a0
        ,
    a1
        ,
    a2);
        // return type: RMatrix
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMatrix.create3x1().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMatrix::create3x1", context, engine);
            return result;
        }
         QScriptValue
        REcmaMatrix::create2x3
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMatrix::create2x3", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMatrix::create2x3";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
    
    if( context->argumentCount() ==
    6 && (
            context->argument(0).isNumber()
        ) /* type: double */
     && (
            context->argument(1).isNumber()
        ) /* type: double */
     && (
            context->argument(2).isNumber()
        ) /* type: double */
     && (
            context->argument(3).isNumber()
        ) /* type: double */
     && (
            context->argument(4).isNumber()
        ) /* type: double */
     && (
            context->argument(5).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a2 =
                    (double)
                    
                    context->argument( 2 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a3 =
                    (double)
                    
                    context->argument( 3 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a4 =
                    (double)
                    
                    context->argument( 4 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a5 =
                    (double)
                    
                    context->argument( 5 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'RMatrix'
    RMatrix cppResult =
        RMatrix::
       create2x3(a0
        ,
    a1
        ,
    a2
        ,
    a3
        ,
    a4
        ,
    a5);
        // return type: RMatrix
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMatrix.create2x3().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMatrix::create2x3", context, engine);
            return result;
        }
         QScriptValue
        REcmaMatrix::operator_multiply
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMatrix::operator *", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMatrix::operator *";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMatrix* self = 
                        getSelf("operator *", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'RMatrix'
    RMatrix cppResult =
        
               self->operator *(a0);
        // return type: RMatrix
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMatrix.operator_multiply().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMatrix::operator *", context, engine);
            return result;
        }
         QScriptValue
        REcmaMatrix::multiplyWith
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMatrix::multiplyWith", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMatrix::multiplyWith";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMatrix* self = 
                        getSelf("multiplyWith", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RMatrix */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RMatrix*
                    ap0 =
                    qscriptvalue_cast<
                    RMatrix*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RMatrix: Argument 0 is not of type RMatrix.",
                               context);                    
                    }
                    RMatrix 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'RMatrix'
    RMatrix cppResult =
        
               self->multiplyWith(a0);
        // return type: RMatrix
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'RMatrix'
    RMatrix cppResult =
        
               self->multiplyWith(a0);
        // return type: RMatrix
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RVector */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RVector*
                    ap0 =
                    qscriptvalue_cast<
                    RVector*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RMatrix: Argument 0 is not of type RVector.",
                               context);                    
                    }
                    RVector 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'RVector'
    RVector cppResult =
        
               self->multiplyWith(a0);
        // return type: RVector
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMatrix.multiplyWith().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMatrix::multiplyWith", context, engine);
            return result;
        }
         QScriptValue
        REcmaMatrix::init
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMatrix::init", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMatrix::init";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMatrix* self = 
                        getSelf("init", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: int */
     && (
            context->argument(1).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    int
                    a1 =
                    (int)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->init(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMatrix.init().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMatrix::init", context, engine);
            return result;
        }
         QScriptValue
        REcmaMatrix::reset
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMatrix::reset", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMatrix::reset";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMatrix* self = 
                        getSelf("reset", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->reset();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMatrix.reset().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMatrix::reset", context, engine);
            return result;
        }
         QScriptValue
        REcmaMatrix::clear
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMatrix::clear", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMatrix::clear";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMatrix* self = 
                        getSelf("clear", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->clear();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMatrix.clear().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMatrix::clear", context, engine);
            return result;
        }
         QScriptValue
        REcmaMatrix::set3x3
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMatrix::set3x3", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMatrix::set3x3";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMatrix* self = 
                        getSelf("set3x3", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    9 && (
            context->argument(0).isNumber()
        ) /* type: double */
     && (
            context->argument(1).isNumber()
        ) /* type: double */
     && (
            context->argument(2).isNumber()
        ) /* type: double */
     && (
            context->argument(3).isNumber()
        ) /* type: double */
     && (
            context->argument(4).isNumber()
        ) /* type: double */
     && (
            context->argument(5).isNumber()
        ) /* type: double */
     && (
            context->argument(6).isNumber()
        ) /* type: double */
     && (
            context->argument(7).isNumber()
        ) /* type: double */
     && (
            context->argument(8).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a2 =
                    (double)
                    
                    context->argument( 2 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a3 =
                    (double)
                    
                    context->argument( 3 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a4 =
                    (double)
                    
                    context->argument( 4 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a5 =
                    (double)
                    
                    context->argument( 5 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a6 =
                    (double)
                    
                    context->argument( 6 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a7 =
                    (double)
                    
                    context->argument( 7 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a8 =
                    (double)
                    
                    context->argument( 8 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->set3x3(a0
        ,
    a1
        ,
    a2
        ,
    a3
        ,
    a4
        ,
    a5
        ,
    a6
        ,
    a7
        ,
    a8);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMatrix.set3x3().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMatrix::set3x3", context, engine);
            return result;
        }
         QScriptValue
        REcmaMatrix::set3x1
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMatrix::set3x1", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMatrix::set3x1";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMatrix* self = 
                        getSelf("set3x1", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isNumber()
        ) /* type: double */
     && (
            context->argument(1).isNumber()
        ) /* type: double */
     && (
            context->argument(2).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a2 =
                    (double)
                    
                    context->argument( 2 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->set3x1(a0
        ,
    a1
        ,
    a2);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMatrix.set3x1().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMatrix::set3x1", context, engine);
            return result;
        }
         QScriptValue
        REcmaMatrix::set2x3
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMatrix::set2x3", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMatrix::set2x3";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMatrix* self = 
                        getSelf("set2x3", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    6 && (
            context->argument(0).isNumber()
        ) /* type: double */
     && (
            context->argument(1).isNumber()
        ) /* type: double */
     && (
            context->argument(2).isNumber()
        ) /* type: double */
     && (
            context->argument(3).isNumber()
        ) /* type: double */
     && (
            context->argument(4).isNumber()
        ) /* type: double */
     && (
            context->argument(5).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a2 =
                    (double)
                    
                    context->argument( 2 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a3 =
                    (double)
                    
                    context->argument( 3 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a4 =
                    (double)
                    
                    context->argument( 4 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a5 =
                    (double)
                    
                    context->argument( 5 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->set2x3(a0
        ,
    a1
        ,
    a2
        ,
    a3
        ,
    a4
        ,
    a5);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMatrix.set2x3().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMatrix::set2x3", context, engine);
            return result;
        }
         QScriptValue
        REcmaMatrix::set
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMatrix::set", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMatrix::set";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMatrix* self = 
                        getSelf("set", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isNumber()
        ) /* type: int */
     && (
            context->argument(1).isNumber()
        ) /* type: int */
     && (
            context->argument(2).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    int
                    a1 =
                    (int)
                    
                    context->argument( 1 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a2 =
                    (double)
                    
                    context->argument( 2 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->set(a0
        ,
    a1
        ,
    a2);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMatrix.set().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMatrix::set", context, engine);
            return result;
        }
         QScriptValue
        REcmaMatrix::get
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMatrix::get", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMatrix::get";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMatrix* self = 
                        getSelf("get", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: int */
     && (
            context->argument(1).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    int
                    a1 =
                    (int)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'double'
    double cppResult =
        
               self->get(a0
        ,
    a1);
        // return type: double
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMatrix.get().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMatrix::get", context, engine);
            return result;
        }
         QScriptValue
        REcmaMatrix::getRows
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMatrix::getRows", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMatrix::getRows";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMatrix* self = 
                        getSelf("getRows", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        
               self->getRows();
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMatrix.getRows().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMatrix::getRows", context, engine);
            return result;
        }
         QScriptValue
        REcmaMatrix::getCols
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMatrix::getCols", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMatrix::getCols";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMatrix* self = 
                        getSelf("getCols", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'int'
    int cppResult =
        
               self->getCols();
        // return type: int
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMatrix.getCols().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMatrix::getCols", context, engine);
            return result;
        }
         QScriptValue
        REcmaMatrix::rref
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMatrix::rref", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMatrix::rref";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMatrix* self = 
                        getSelf("rref", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->rref();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMatrix.rref().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMatrix::rref", context, engine);
            return result;
        }
         QScriptValue
        REcmaMatrix::getInverse
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMatrix::getInverse", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMatrix::getInverse";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMatrix* self = 
                        getSelf("getInverse", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RMatrix'
    RMatrix cppResult =
        
               self->getInverse();
        // return type: RMatrix
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMatrix.getInverse().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMatrix::getInverse", context, engine);
            return result;
        }
         QScriptValue
        REcmaMatrix::getTransposed
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMatrix::getTransposed", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMatrix::getTransposed";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMatrix* self = 
                        getSelf("getTransposed", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RMatrix'
    RMatrix cppResult =
        
               self->getTransposed();
        // return type: RMatrix
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMatrix.getTransposed().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMatrix::getTransposed", context, engine);
            return result;
        }
         QScriptValue
        REcmaMatrix::getAppended
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMatrix::getAppended", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMatrix::getAppended";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMatrix* self = 
                        getSelf("getAppended", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RMatrix */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RMatrix*
                    ap0 =
                    qscriptvalue_cast<
                    RMatrix*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RMatrix: Argument 0 is not of type RMatrix.",
                               context);                    
                    }
                    RMatrix 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'RMatrix'
    RMatrix cppResult =
        
               self->getAppended(a0);
        // return type: RMatrix
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMatrix.getAppended().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMatrix::getAppended", context, engine);
            return result;
        }
         QScriptValue
        REcmaMatrix::isRotationAndUniformScale
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMatrix::isRotationAndUniformScale", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMatrix::isRotationAndUniformScale";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMatrix* self = 
                        getSelf("isRotationAndUniformScale", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->isRotationAndUniformScale();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMatrix.isRotationAndUniformScale().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMatrix::isRotationAndUniformScale", context, engine);
            return result;
        }
         QScriptValue
        REcmaMatrix::getUniformScaleFactor
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMatrix::getUniformScaleFactor", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMatrix::getUniformScaleFactor";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMatrix* self = 
                        getSelf("getUniformScaleFactor", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'double'
    double cppResult =
        
               self->getUniformScaleFactor();
        // return type: double
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMatrix.getUniformScaleFactor().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMatrix::getUniformScaleFactor", context, engine);
            return result;
        }
         QScriptValue
        REcmaMatrix::getRotationAngle
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaMatrix::getRotationAngle", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaMatrix::getRotationAngle";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RMatrix* self = 
                        getSelf("getRotationAngle", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'double'
    double cppResult =
        
               self->getRotationAngle();
        // return type: double
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RMatrix.getRotationAngle().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaMatrix::getRotationAngle", context, engine);
            return result;
        }
         QScriptValue REcmaMatrix::toString
    (QScriptContext *context, QScriptEngine *engine)
    
    {

    RMatrix* self = getSelf("toString", context);
    
    QString result;
    
            QDebug d(&result);
            if (self!=NULL) {
                d << *self;
            }
            else {
                d << "NULL";
            }
        
    return QScriptValue(result);
    }
     QScriptValue REcmaMatrix::copy
    (QScriptContext *context, QScriptEngine *engine)
    
    {
        RMatrix cp = qscriptvalue_cast<RMatrix>(context->thisObject());
        return qScriptValueFromValue(engine, cp);
    }
     QScriptValue REcmaMatrix::destroy(QScriptContext *context, QScriptEngine *engine)
    
    {

        RMatrix* self = getSelf("RMatrix", context);
        //Q_ASSERT(self!=NULL);
        if (self==NULL) {
            return REcmaHelper::throwError("self is NULL", context);
        }
        
    
        delete self;
        context->thisObject().setData(engine->nullValue());
        context->thisObject().prototype().setData(engine->nullValue());
        context->thisObject().setPrototype(engine->nullValue());
        context->thisObject().setScriptClass(NULL);
        return engine->undefinedValue();
    }
    RMatrix* REcmaMatrix::getSelf(const QString& fName, QScriptContext* context)
    
        {
            RMatrix* self = NULL;

            
                // self could be a normal object (e.g. from an UI file) or
                // an ECMA shell object (made from an ECMA script):
                //self = getSelfShell(fName, context);
                

            //if (self==NULL) {
                self = REcmaHelper::scriptValueTo<RMatrix >(context->thisObject())
                
                ;
            //}

            if (self == NULL){
                // avoid recursion (toString is used by the backtrace):
                if (fName!="toString") {
                    REcmaHelper::throwError(QString("RMatrix.%1(): "
                        "This object is not a RMatrix").arg(fName),
                        context);
                }
                return NULL;
            }

            return self;
        }
        RMatrix* REcmaMatrix::getSelfShell(const QString& fName, QScriptContext* context)
    
        {
          RMatrix* selfBase = getSelf(fName, context);
                RMatrix* self = dynamic_cast<RMatrix*>(selfBase);
                //return REcmaHelper::scriptValueTo<RMatrix >(context->thisObject());
            if(self == NULL){
                REcmaHelper::throwError(QString("RMatrix.%1(): "
                    "This object is not a RMatrix").arg(fName),
                    context);
            }

            return self;
            


        }
        