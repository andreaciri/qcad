// ***** AUTOGENERATED CODE, DO NOT EDIT *****
            // ***** This class is not copyable.
        
        #include "REcmaActionAdapter.h"
        #include "RMetaTypes.h"
        #include "../REcmaHelper.h"

        // forwards declarations mapped to includes
        
                #include "RPropertyEvent.h"
            
                #include "RGraphicsScene.h"
            
                #include "RDocumentInterface.h"
            
                #include "RCommandEvent.h"
            
                #include "RCoordinateEvent.h"
            
                #include "RDocument.h"
            
                #include "REntityPickEvent.h"
            
                #include "RMouseEvent.h"
            
                #include "RWheelEvent.h"
            
                #include "RGuiAction.h"
            
                #include "RStorage.h"
            
                #include "RTabletEvent.h"
            
                #include "ROperation.h"
            
            
        // includes for base ecma wrapper classes
        
                  #include "REcmaAction.h"
                 void REcmaActionAdapter::initEcma(QScriptEngine& engine, QScriptValue* proto 
    
    ) 
    
    {

    bool protoCreated = false;
    if(proto == NULL){
        proto = new QScriptValue(engine.newVariant(qVariantFromValue(
                (RActionAdapter*) 0)));
        protoCreated = true;
    }

    
        // primary base class RAction:
        
            QScriptValue dpt = engine.defaultPrototype(
                qMetaTypeId<RAction*>());

            if (dpt.isValid()) {
                proto->setPrototype(dpt);
            }
          
        /*
        
        */
    

    QScriptValue fun;

    // toString:
    REcmaHelper::registerFunction(&engine, proto, toString, "toString");
    

    // destroy:
    REcmaHelper::registerFunction(&engine, proto, destroy, "destroy");
    
        // conversion for base class RAction
        REcmaHelper::registerFunction(&engine, proto, getRAction, "getRAction");
        

    // get class name
    REcmaHelper::registerFunction(&engine, proto, getClassName, "getClassName");
    

    // conversion to all base classes (multiple inheritance):
    REcmaHelper::registerFunction(&engine, proto, getBaseClasses, "getBaseClasses");
    

    // properties:
    

    // methods:
    
            REcmaHelper::registerFunction(&engine, proto, beginEvent, "beginEvent");
            
            REcmaHelper::registerFunction(&engine, proto, setGraphicsView, "setGraphicsView");
            
            REcmaHelper::registerFunction(&engine, proto, finishEvent, "finishEvent");
            
            REcmaHelper::registerFunction(&engine, proto, enterEvent, "enterEvent");
            
            REcmaHelper::registerFunction(&engine, proto, suspendEvent, "suspendEvent");
            
            REcmaHelper::registerFunction(&engine, proto, resumeEvent, "resumeEvent");
            
            REcmaHelper::registerFunction(&engine, proto, escapeEvent, "escapeEvent");
            
            REcmaHelper::registerFunction(&engine, proto, keyPressEvent, "keyPressEvent");
            
            REcmaHelper::registerFunction(&engine, proto, keyReleaseEvent, "keyReleaseEvent");
            
            REcmaHelper::registerFunction(&engine, proto, mousePressEvent, "mousePressEvent");
            
            REcmaHelper::registerFunction(&engine, proto, mouseMoveEvent, "mouseMoveEvent");
            
            REcmaHelper::registerFunction(&engine, proto, mouseReleaseEvent, "mouseReleaseEvent");
            
            REcmaHelper::registerFunction(&engine, proto, mouseDoubleClickEvent, "mouseDoubleClickEvent");
            
            REcmaHelper::registerFunction(&engine, proto, wheelEvent, "wheelEvent");
            
            REcmaHelper::registerFunction(&engine, proto, tabletEvent, "tabletEvent");
            
            REcmaHelper::registerFunction(&engine, proto, swipeGestureEvent, "swipeGestureEvent");
            
            REcmaHelper::registerFunction(&engine, proto, panGestureEvent, "panGestureEvent");
            
            REcmaHelper::registerFunction(&engine, proto, pinchGestureEvent, "pinchGestureEvent");
            
            REcmaHelper::registerFunction(&engine, proto, commandEvent, "commandEvent");
            
            REcmaHelper::registerFunction(&engine, proto, commandEventPreview, "commandEventPreview");
            
            REcmaHelper::registerFunction(&engine, proto, coordinateEvent, "coordinateEvent");
            
            REcmaHelper::registerFunction(&engine, proto, coordinateEventPreview, "coordinateEventPreview");
            
            REcmaHelper::registerFunction(&engine, proto, entityPickEvent, "entityPickEvent");
            
            REcmaHelper::registerFunction(&engine, proto, entityPickEventPreview, "entityPickEventPreview");
            
            REcmaHelper::registerFunction(&engine, proto, propertyChangeEvent, "propertyChangeEvent");
            
            REcmaHelper::registerFunction(&engine, proto, zoomChangeEvent, "zoomChangeEvent");
            
            REcmaHelper::registerFunction(&engine, proto, updatePreview, "updatePreview");
            
            REcmaHelper::registerFunction(&engine, proto, applyOperation, "applyOperation");
            
        engine.setDefaultPrototype(
            qMetaTypeId<RActionAdapter*>(), *proto);

        
    

    QScriptValue ctor = engine.newFunction(createEcma, *proto, 2);
    
    // static methods:
    

    // static properties:
    

    // enum values:
    

    // enum conversions:
    
        
    // init class:
    engine.globalObject().setProperty("RActionAdapter",
    ctor, QScriptValue::SkipInEnumeration);
    
    if( protoCreated ){
       delete proto;
    }
    
    }
     QScriptValue REcmaActionAdapter::createEcma(QScriptContext* context, QScriptEngine* engine) 
    
    {
    if (context->thisObject().strictlyEquals(
       engine->globalObject())) {
       return REcmaHelper::throwError(
       QString::fromLatin1("RActionAdapter(): Did you forget to construct with 'new'?"),
           context);
    }

    QScriptValue result;
        
            // generate constructor variants:
            
    if( context->argumentCount() ==
        0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ constructor:
    
            // non-copyable class:
            REcmaShellActionAdapter
                    * cppResult =
                    new
                    REcmaShellActionAdapter
                    ();
                
                    // TODO: triggers: Warning: QScriptEngine::newVariant(): changing class of non-QScriptObject not supported:
                    result = engine->newVariant(context->thisObject(), qVariantFromValue(cppResult));
                
        cppResult->__qtscript_self = result;
    
    } else 

    if( context->argumentCount() ==
        1
                && (
                
                        context->argument(
                        0
                        ).isQObject()
                ) /* type: RGuiAction * */
            
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RGuiAction * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RGuiAction >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RActionAdapter: Argument 0 is not of type RGuiAction *RGuiAction *.", context);                    
                    }
                
    // end of arguments

    // call C++ constructor:
    
            // non-copyable class:
            REcmaShellActionAdapter
                    * cppResult =
                    new
                    REcmaShellActionAdapter
                    (
                    a0
                    );
                
                    // TODO: triggers: Warning: QScriptEngine::newVariant(): changing class of non-QScriptObject not supported:
                    result = engine->newVariant(context->thisObject(), qVariantFromValue(cppResult));
                
        cppResult->__qtscript_self = result;
    
    } else 

    {
       return REcmaHelper::throwError(
       QString::fromLatin1("RActionAdapter(): no matching constructor found."),
           context);
    }
    
    return result;
    }
    

    // conversion functions for base classes:
     QScriptValue REcmaActionAdapter::getRAction(QScriptContext *context,
            QScriptEngine *engine)
        
            {
                RAction* cppResult =
                    qscriptvalue_cast<RActionAdapter*> (context->thisObject());
                QScriptValue result = qScriptValueFromValue(engine, cppResult);
                return result;
            }
            

    // returns class name:
     QScriptValue REcmaActionAdapter::getClassName(QScriptContext *context, QScriptEngine *engine) 
        
    {
        return qScriptValueFromValue(engine, QString("RActionAdapter"));
    }
    

    // returns all base classes (in case of multiple inheritance):
     QScriptValue REcmaActionAdapter::getBaseClasses(QScriptContext *context, QScriptEngine *engine) 
        
    {
        QStringList list;
        
        list.append("RAction");
    

        return qScriptValueFromSequence(engine, list);
    }
    

    // properties:
    

    // public methods:
     QScriptValue
        REcmaActionAdapter::beginEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaActionAdapter::beginEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaActionAdapter::beginEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RActionAdapter* self = 
                        getSelf("beginEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->beginEvent();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RActionAdapter.beginEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaActionAdapter::beginEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaActionAdapter::setGraphicsView
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaActionAdapter::setGraphicsView", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaActionAdapter::setGraphicsView";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RActionAdapter* self = 
                        getSelf("setGraphicsView", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RGraphicsView * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RGraphicsView * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RGraphicsView >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RActionAdapter: Argument 0 is not of type RGraphicsView *RGraphicsView *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setGraphicsView(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RActionAdapter.setGraphicsView().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaActionAdapter::setGraphicsView", context, engine);
            return result;
        }
         QScriptValue
        REcmaActionAdapter::finishEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaActionAdapter::finishEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaActionAdapter::finishEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RActionAdapter* self = 
                        getSelf("finishEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->finishEvent();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RActionAdapter.finishEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaActionAdapter::finishEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaActionAdapter::enterEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaActionAdapter::enterEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaActionAdapter::enterEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RActionAdapter* self = 
                        getSelf("enterEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->enterEvent();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RActionAdapter.enterEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaActionAdapter::enterEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaActionAdapter::suspendEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaActionAdapter::suspendEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaActionAdapter::suspendEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RActionAdapter* self = 
                        getSelf("suspendEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->suspendEvent();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RActionAdapter.suspendEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaActionAdapter::suspendEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaActionAdapter::resumeEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaActionAdapter::resumeEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaActionAdapter::resumeEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RActionAdapter* self = 
                        getSelf("resumeEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->resumeEvent();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RActionAdapter.resumeEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaActionAdapter::resumeEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaActionAdapter::escapeEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaActionAdapter::escapeEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaActionAdapter::escapeEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RActionAdapter* self = 
                        getSelf("escapeEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->escapeEvent();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RActionAdapter.escapeEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaActionAdapter::escapeEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaActionAdapter::keyPressEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaActionAdapter::keyPressEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaActionAdapter::keyPressEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RActionAdapter* self = 
                        getSelf("keyPressEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant()
        ) /* type: QKeyEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QKeyEvent*
                    ap0 =
                    qscriptvalue_cast<
                    QKeyEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RActionAdapter: Argument 0 is not of type QKeyEvent*.",
                               context);                    
                    }
                    QKeyEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->keyPressEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RActionAdapter.keyPressEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaActionAdapter::keyPressEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaActionAdapter::keyReleaseEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaActionAdapter::keyReleaseEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaActionAdapter::keyReleaseEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RActionAdapter* self = 
                        getSelf("keyReleaseEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant()
        ) /* type: QKeyEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QKeyEvent*
                    ap0 =
                    qscriptvalue_cast<
                    QKeyEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RActionAdapter: Argument 0 is not of type QKeyEvent*.",
                               context);                    
                    }
                    QKeyEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->keyReleaseEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RActionAdapter.keyReleaseEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaActionAdapter::keyReleaseEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaActionAdapter::mousePressEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaActionAdapter::mousePressEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaActionAdapter::mousePressEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RActionAdapter* self = 
                        getSelf("mousePressEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RMouseEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RMouseEvent*
                    ap0 =
                    qscriptvalue_cast<
                    RMouseEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RActionAdapter: Argument 0 is not of type RMouseEvent*.",
                               context);                    
                    }
                    RMouseEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->mousePressEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RActionAdapter.mousePressEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaActionAdapter::mousePressEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaActionAdapter::mouseMoveEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaActionAdapter::mouseMoveEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaActionAdapter::mouseMoveEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RActionAdapter* self = 
                        getSelf("mouseMoveEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RMouseEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RMouseEvent*
                    ap0 =
                    qscriptvalue_cast<
                    RMouseEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RActionAdapter: Argument 0 is not of type RMouseEvent*.",
                               context);                    
                    }
                    RMouseEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->mouseMoveEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RActionAdapter.mouseMoveEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaActionAdapter::mouseMoveEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaActionAdapter::mouseReleaseEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaActionAdapter::mouseReleaseEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaActionAdapter::mouseReleaseEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RActionAdapter* self = 
                        getSelf("mouseReleaseEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RMouseEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RMouseEvent*
                    ap0 =
                    qscriptvalue_cast<
                    RMouseEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RActionAdapter: Argument 0 is not of type RMouseEvent*.",
                               context);                    
                    }
                    RMouseEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->mouseReleaseEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RActionAdapter.mouseReleaseEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaActionAdapter::mouseReleaseEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaActionAdapter::mouseDoubleClickEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaActionAdapter::mouseDoubleClickEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaActionAdapter::mouseDoubleClickEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RActionAdapter* self = 
                        getSelf("mouseDoubleClickEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RMouseEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RMouseEvent*
                    ap0 =
                    qscriptvalue_cast<
                    RMouseEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RActionAdapter: Argument 0 is not of type RMouseEvent*.",
                               context);                    
                    }
                    RMouseEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->mouseDoubleClickEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RActionAdapter.mouseDoubleClickEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaActionAdapter::mouseDoubleClickEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaActionAdapter::wheelEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaActionAdapter::wheelEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaActionAdapter::wheelEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RActionAdapter* self = 
                        getSelf("wheelEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RWheelEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RWheelEvent*
                    ap0 =
                    qscriptvalue_cast<
                    RWheelEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RActionAdapter: Argument 0 is not of type RWheelEvent*.",
                               context);                    
                    }
                    RWheelEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->wheelEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RActionAdapter.wheelEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaActionAdapter::wheelEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaActionAdapter::tabletEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaActionAdapter::tabletEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaActionAdapter::tabletEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RActionAdapter* self = 
                        getSelf("tabletEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RTabletEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RTabletEvent*
                    ap0 =
                    qscriptvalue_cast<
                    RTabletEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RActionAdapter: Argument 0 is not of type RTabletEvent*.",
                               context);                    
                    }
                    RTabletEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->tabletEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RActionAdapter.tabletEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaActionAdapter::tabletEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaActionAdapter::swipeGestureEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaActionAdapter::swipeGestureEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaActionAdapter::swipeGestureEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RActionAdapter* self = 
                        getSelf("swipeGestureEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QSwipeGesture */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QSwipeGesture*
                    ap0 =
                    qscriptvalue_cast<
                    QSwipeGesture*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RActionAdapter: Argument 0 is not of type QSwipeGesture*.",
                               context);                    
                    }
                    QSwipeGesture& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->swipeGestureEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RActionAdapter.swipeGestureEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaActionAdapter::swipeGestureEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaActionAdapter::panGestureEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaActionAdapter::panGestureEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaActionAdapter::panGestureEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RActionAdapter* self = 
                        getSelf("panGestureEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QPanGesture */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QPanGesture*
                    ap0 =
                    qscriptvalue_cast<
                    QPanGesture*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RActionAdapter: Argument 0 is not of type QPanGesture*.",
                               context);                    
                    }
                    QPanGesture& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->panGestureEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RActionAdapter.panGestureEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaActionAdapter::panGestureEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaActionAdapter::pinchGestureEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaActionAdapter::pinchGestureEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaActionAdapter::pinchGestureEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RActionAdapter* self = 
                        getSelf("pinchGestureEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QPinchGesture */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QPinchGesture*
                    ap0 =
                    qscriptvalue_cast<
                    QPinchGesture*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RActionAdapter: Argument 0 is not of type QPinchGesture*.",
                               context);                    
                    }
                    QPinchGesture& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->pinchGestureEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RActionAdapter.pinchGestureEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaActionAdapter::pinchGestureEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaActionAdapter::commandEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaActionAdapter::commandEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaActionAdapter::commandEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RActionAdapter* self = 
                        getSelf("commandEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RCommandEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RCommandEvent*
                    ap0 =
                    qscriptvalue_cast<
                    RCommandEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RActionAdapter: Argument 0 is not of type RCommandEvent*.",
                               context);                    
                    }
                    RCommandEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->commandEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RActionAdapter.commandEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaActionAdapter::commandEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaActionAdapter::commandEventPreview
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaActionAdapter::commandEventPreview", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaActionAdapter::commandEventPreview";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RActionAdapter* self = 
                        getSelf("commandEventPreview", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RCommandEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RCommandEvent*
                    ap0 =
                    qscriptvalue_cast<
                    RCommandEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RActionAdapter: Argument 0 is not of type RCommandEvent*.",
                               context);                    
                    }
                    RCommandEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->commandEventPreview(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RActionAdapter.commandEventPreview().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaActionAdapter::commandEventPreview", context, engine);
            return result;
        }
         QScriptValue
        REcmaActionAdapter::coordinateEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaActionAdapter::coordinateEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaActionAdapter::coordinateEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RActionAdapter* self = 
                        getSelf("coordinateEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RCoordinateEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RCoordinateEvent*
                    ap0 =
                    qscriptvalue_cast<
                    RCoordinateEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RActionAdapter: Argument 0 is not of type RCoordinateEvent*.",
                               context);                    
                    }
                    RCoordinateEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->coordinateEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RActionAdapter.coordinateEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaActionAdapter::coordinateEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaActionAdapter::coordinateEventPreview
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaActionAdapter::coordinateEventPreview", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaActionAdapter::coordinateEventPreview";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RActionAdapter* self = 
                        getSelf("coordinateEventPreview", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RCoordinateEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RCoordinateEvent*
                    ap0 =
                    qscriptvalue_cast<
                    RCoordinateEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RActionAdapter: Argument 0 is not of type RCoordinateEvent*.",
                               context);                    
                    }
                    RCoordinateEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->coordinateEventPreview(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RActionAdapter.coordinateEventPreview().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaActionAdapter::coordinateEventPreview", context, engine);
            return result;
        }
         QScriptValue
        REcmaActionAdapter::entityPickEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaActionAdapter::entityPickEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaActionAdapter::entityPickEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RActionAdapter* self = 
                        getSelf("entityPickEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: REntityPickEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    REntityPickEvent*
                    ap0 =
                    qscriptvalue_cast<
                    REntityPickEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RActionAdapter: Argument 0 is not of type REntityPickEvent*.",
                               context);                    
                    }
                    REntityPickEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->entityPickEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RActionAdapter.entityPickEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaActionAdapter::entityPickEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaActionAdapter::entityPickEventPreview
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaActionAdapter::entityPickEventPreview", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaActionAdapter::entityPickEventPreview";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RActionAdapter* self = 
                        getSelf("entityPickEventPreview", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: REntityPickEvent */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    REntityPickEvent*
                    ap0 =
                    qscriptvalue_cast<
                    REntityPickEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RActionAdapter: Argument 0 is not of type REntityPickEvent*.",
                               context);                    
                    }
                    REntityPickEvent& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->entityPickEventPreview(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RActionAdapter.entityPickEventPreview().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaActionAdapter::entityPickEventPreview", context, engine);
            return result;
        }
         QScriptValue
        REcmaActionAdapter::propertyChangeEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaActionAdapter::propertyChangeEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaActionAdapter::propertyChangeEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RActionAdapter* self = 
                        getSelf("propertyChangeEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPropertyEvent */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPropertyEvent*
                    ap0 =
                    qscriptvalue_cast<
                    RPropertyEvent*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RActionAdapter: Argument 0 is not of type RPropertyEvent.",
                               context);                    
                    }
                    RPropertyEvent 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->propertyChangeEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RActionAdapter.propertyChangeEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaActionAdapter::propertyChangeEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaActionAdapter::zoomChangeEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaActionAdapter::zoomChangeEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaActionAdapter::zoomChangeEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RActionAdapter* self = 
                        getSelf("zoomChangeEvent", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RGraphicsView */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RGraphicsView*
                    ap0 =
                    qscriptvalue_cast<
                    RGraphicsView*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RActionAdapter: Argument 0 is not of type RGraphicsView*.",
                               context);                    
                    }
                    RGraphicsView& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->zoomChangeEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RActionAdapter.zoomChangeEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaActionAdapter::zoomChangeEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaActionAdapter::updatePreview
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaActionAdapter::updatePreview", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaActionAdapter::updatePreview";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RActionAdapter* self = 
                        getSelf("updatePreview", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->updatePreview();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RActionAdapter.updatePreview().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaActionAdapter::updatePreview", context, engine);
            return result;
        }
         QScriptValue
        REcmaActionAdapter::applyOperation
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaActionAdapter::applyOperation", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaActionAdapter::applyOperation";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RActionAdapter* self = 
                        getSelf("applyOperation", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->applyOperation();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RActionAdapter.applyOperation().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaActionAdapter::applyOperation", context, engine);
            return result;
        }
         QScriptValue REcmaActionAdapter::toString
    (QScriptContext *context, QScriptEngine *engine)
    
    {

    RActionAdapter* self = getSelf("toString", context);
    
    QString result;
    
            result = QString("RActionAdapter(0x%1)").arg((unsigned long int)self, 0, 16);
        
    return QScriptValue(result);
    }
     QScriptValue REcmaActionAdapter::destroy(QScriptContext *context, QScriptEngine *engine)
    
    {

        RActionAdapter* self = getSelf("RActionAdapter", context);
        //Q_ASSERT(self!=NULL);
        if (self==NULL) {
            return REcmaHelper::throwError("self is NULL", context);
        }
        
    
        delete self;
        context->thisObject().setData(engine->nullValue());
        context->thisObject().prototype().setData(engine->nullValue());
        context->thisObject().setPrototype(engine->nullValue());
        context->thisObject().setScriptClass(NULL);
        return engine->undefinedValue();
    }
    RActionAdapter* REcmaActionAdapter::getSelf(const QString& fName, QScriptContext* context)
    
        {
            RActionAdapter* self = NULL;

            
                // self could be a normal object (e.g. from an UI file) or
                // an ECMA shell object (made from an ECMA script):
                //self = getSelfShell(fName, context);
                

            //if (self==NULL) {
                self = REcmaHelper::scriptValueTo<RActionAdapter >(context->thisObject())
                
                ;
            //}

            if (self == NULL){
                // avoid recursion (toString is used by the backtrace):
                if (fName!="toString") {
                    REcmaHelper::throwError(QString("RActionAdapter.%1(): "
                        "This object is not a RActionAdapter").arg(fName),
                        context);
                }
                return NULL;
            }

            return self;
        }
        REcmaShellActionAdapter* REcmaActionAdapter::getSelfShell(const QString& fName, QScriptContext* context)
    
        {
          RActionAdapter* selfBase = getSelf(fName, context);
                REcmaShellActionAdapter* self = dynamic_cast<REcmaShellActionAdapter*>(selfBase);
                //return REcmaHelper::scriptValueTo<REcmaShellActionAdapter >(context->thisObject());
            if(self == NULL){
                REcmaHelper::throwError(QString("RActionAdapter.%1(): "
                    "This object is not a RActionAdapter").arg(fName),
                    context);
            }

            return self;
            


        }
        